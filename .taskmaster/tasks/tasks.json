{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "Setup Garmin Connect IQ Project & Build System",
        "description": "Set up the development environment for Garmin Connect IQ, including SDK 7.x, Monkey C compiler, and device simulators. Configure project structure and version control (Git).",
        "details": "1. Install Garmin Connect IQ SDK 7.x. 2. Configure IDE (e.g., VS Code with Monkey C extension). 3. Create a new Connect IQ project for a watch app. 4. Initialize Git repository. 5. Set up build scripts for compiling and packaging. 6. Target initial devices: Forerunner 265, Fenix 7, Epix Gen 2.",
        "testStrategy": "Verify successful compilation of a 'Hello World' app. Test deployment to a simulator and a physical target device if available. Confirm SDK version and tools are correctly configured.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Design Core Application Architecture & Navigation",
        "description": "Design the overall application architecture, including module separation (UI, data, business logic, sensor management), navigation flow between screens, and data management strategies.",
        "details": "1. Define main application modules: `UIManager`, `DataManager`, `WorkoutEngine`, `SensorService`, `SettingsManager`. 2. Map out screen transitions (e.g., Home -> Select Workout -> Active Workout -> Summary). 3. Plan for efficient state management. 4. Design for testability and maintainability. Use Garmin's Page Object Model or similar for UI views.",
        "testStrategy": "Review architecture diagrams for clarity and completeness. Conduct thought experiments for key use cases to ensure the architecture supports them. Ensure module interfaces are well-defined.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Base UI Components and Styling",
        "description": "Implement reusable UI components (buttons, lists, custom views for workout data) and establish a consistent styling guide adhering to Garmin's UI best practices and the app's branding.",
        "details": "1. Create base classes or modules for common UI elements. 2. Implement layouts for different screen types (e.g., data display, input forms). 3. Ensure components are responsive to different Garmin device screen sizes and input methods (touch, buttons). 4. Implement initial styling (colors, fonts, spacing). Consider using Garmin's `Ui.Drawable` and layout XMLs.",
        "testStrategy": "Visually inspect UI components on simulators for various target devices. Test responsiveness and usability of components. Unit test individual component logic where applicable.",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Define Local Storage Schema",
        "description": "Define the structure for local data storage using Garmin's Application.Storage API. This includes schemas for exercises, workout templates, workout history, user settings, and cached biometric data.",
        "details": "1. Define JSON structures or object models for: `Exercise` (name, muscle_groups, equipment, custom_tags, form_cues_ref), `WorkoutTemplate` (name, exercises_list, program_type), `WorkoutLog` (timestamp, template_used, exercise_details, sets_data), `UserSettings` (preferences, device_config), `BiometricCache` (HRV, BodyBattery). 2. Implement helper functions for saving and loading these data structures. 3. Plan for data versioning and migration if schema changes. Max 100 workouts stored locally.",
        "testStrategy": "Test save and load operations for each data type. Verify data integrity after storage and retrieval. Test storage limits and cleanup logic (e.g., for workout history).",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Exercise Data Model and Populate Initial Library",
        "description": "Implement the data model for exercises and populate the initial library with over 200 exercises, including metadata like muscle groups, equipment type, difficulty, and variations.",
        "details": "1. Create an `Exercise` class/object structure based on Task 14. 2. Source and curate data for 200+ exercises (name, primary/secondary muscles, equipment, difficulty, variations, alternative exercises). 3. Store this data efficiently, possibly in a bundled JSON resource or directly in code if small enough, for initial app load. Consider a script to convert a CSV/JSON source into Monkey C compatible format.",
        "testStrategy": "Verify the number of exercises loaded. Check a sample of exercises for data accuracy. Test data retrieval speed. Ensure all required metadata fields are present.",
        "priority": "high",
        "dependencies": [
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Develop UI for Exercise Library & Custom Exercise Creation",
        "description": "Develop the user interface for browsing the exercise library, filtering exercises (by muscle group, equipment), and allowing users to create and save custom exercises with tags.",
        "details": "1. Implement a list view for exercises. 2. Add filtering controls (e.g., dropdowns, multi-select). 3. Create a form for adding custom exercises (name, muscle group, equipment, notes). 4. Ensure custom exercises are saved to local storage (Task 14). `Pseudo-code: onReceive(Ui.PRESS) { if (filterButton) { showFilterView(); } else if (addExerciseButton) { showCustomExerciseForm(); } }`",
        "testStrategy": "Test browsing, searching, and filtering functionality. Verify custom exercise creation, saving, and display in the library. Test UI responsiveness with a large number of exercises.",
        "priority": "medium",
        "dependencies": [
          13,
          15
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implement Workout Template Data Model and Management Logic",
        "description": "Implement the data model for workout templates and the logic for creating, storing, and managing them. Support pre-built programs (e.g., 5/3/1, PPL) and user-created custom templates.",
        "details": "1. Create `WorkoutTemplate` class/object structure (name, description, list of `ExerciseSet` objects - exercise_id, target_sets, target_reps, target_weight/RPE, rest_time). 2. Implement functions to load pre-built templates (e.g., from bundled JSON). 3. Implement CRUD operations for user-defined templates stored locally.",
        "testStrategy": "Test creation, saving, loading, and deletion of workout templates. Verify integrity of template data, especially exercise references. Test loading of pre-built templates.",
        "priority": "high",
        "dependencies": [
          14,
          15
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Develop UI for Workout Template Creation, Viewing, and Selection",
        "description": "Develop the user interface for users to create new workout templates, view existing templates (both pre-built and custom), and select a template to start a workout session.",
        "details": "1. Implement a list view for available templates. 2. Create a template editor UI: add/remove/reorder exercises, define sets/reps for each. 3. UI to select a template and initiate a workout. `Pseudo-code: onSelectTemplate(templateId) { currentWorkout = loadTemplate(templateId); navigateToActiveWorkoutView(); }`",
        "testStrategy": "Test template creation flow, including adding exercises and setting parameters. Verify template selection and correct loading for a workout. Test UI for viewing template details.",
        "priority": "medium",
        "dependencies": [
          13,
          17
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implement Active Workout Session UI",
        "description": "Implement the main UI screen for an active workout session. This screen should display the current exercise, target sets/reps, a rest timer, and allow navigation between exercises/sets.",
        "details": "1. Design layout to clearly show: current exercise name, current set/total sets, target reps/weight, completed reps/weight for current set. 2. Implement a rest timer with start/stop/skip functionality. 3. Navigation controls (e.g., next set, next exercise, previous exercise). 4. Display historical performance for the current exercise if available (see Task 25).",
        "testStrategy": "Test workout flow: starting a workout, progressing through sets and exercises. Verify correct display of workout data. Test rest timer functionality. Test navigation within the workout.",
        "priority": "high",
        "dependencies": [
          13,
          18
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement Sensor Data Acquisition (Accel, Gyro, HR)",
        "description": "Implement functionality to access and process data from Garmin device sensors: accelerometer, gyroscope, and heart rate monitor, as per Connect IQ SDK capabilities.",
        "details": "1. Use `Toybox.Sensor` module. 2. Request necessary permissions in `manifest.xml`. 3. Configure sensor data rates and batching if applicable. 4. Implement callbacks to receive sensor data. `Pseudo-code: Sensor.setEnabledSensors([Sensor.SENSOR_ACCELEROMETER, Sensor.SENSOR_GYROSCOPE, Sensor.SENSOR_HEARTRATE]); Sensor.enableSensorEvents(method(:onSensorData));` 5. Handle sensor availability and errors gracefully.",
        "testStrategy": "Verify data is being received from each sensor. Test on simulator and physical device. Check data frequency and accuracy. Monitor battery impact of sensor usage.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Develop Initial Rep Counting Algorithm",
        "description": "Develop the initial version of the rep counting algorithm using combined accelerometer and gyroscope data. Focus on a few common exercises first for algorithm development and tuning.",
        "details": "1. Analyze sensor data patterns for target exercises (e.g., squat, bench press, deadlift). 2. Implement peak detection or pattern recognition algorithms on sensor streams to identify repetitions. 3. Start with exercise-specific algorithms before attempting a generic one. 4. Filter noise and identify distinct rep movements. `Pseudo-code: function onSensorData(sensorInfo) { acc_data = sensorInfo.accel; gyro_data = sensorInfo.gyro; processMotionData(acc_data, gyro_data); // if rep_detected { incrementRepCount(); } }`",
        "testStrategy": "Test rep counting accuracy against manual counting for selected exercises on various users. Iterate on algorithm parameters. Test robustness against variations in form and speed. Aim for >90% accuracy for MVP.",
        "priority": "high",
        "dependencies": [
          20
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Implement Workout Logging: Saving Completed Sets/Reps/Weight",
        "description": "Implement the logic to record completed sets, including reps performed, weight lifted, and other relevant metrics (e.g., RPE if implemented) into the local workout history storage.",
        "details": "1. After each set is completed (manually confirmed or auto-detected), gather data: exercise ID, reps, weight, set number, rest duration. 2. Store this data as part of the current `WorkoutLog` object (Task 14). 3. Ensure data is saved durably, even if the app is interrupted. 4. Implement logic for editing a completed set's data immediately after completion.",
        "testStrategy": "Perform workouts and verify that all data is accurately logged. Test editing of set data. Check data persistence after app restart. Verify workout summary reflects logged data.",
        "priority": "high",
        "dependencies": [
          14,
          19,
          21
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Implement Basic Progression Schemes (Linear, Double)",
        "description": "Implement logic for basic progression schemes: linear progression (increment weight each session) and double progression (increase reps, then weight). Suggest next workout's weights/reps based on these.",
        "details": "1. For linear: if target reps met, suggest +X lbs/kg for next time. 2. For double: if max reps in range met, suggest +X lbs/kg and reset to min reps in range. 3. Access historical data (Task 22) to determine previous performance. 4. Display suggestions when planning the next workout or viewing exercise history.",
        "testStrategy": "Test progression logic with various workout histories. Verify correct weight/rep suggestions for both linear and double progression schemes. Ensure user can override suggestions.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Integrate Garmin Biometrics: Fetch HRV and Body Battery Data",
        "description": "Integrate with Garmin's Health API (Toybox.ActivityMonitor) to fetch user's Heart Rate Variability (HRV) and Body Battery data to inform workout readiness or intensity suggestions.",
        "details": "1. Request `ActivityMonitor` permissions. 2. Use `ActivityMonitor.getHeartRateHistory()` for HRV insights (e.g., last night's average, or if specific HRV scores are available). 3. Use `ActivityMonitor.getInfo().bodyBattery` to get current Body Battery. 4. Store/cache this data locally (Task 14). 5. Display this information to the user, e.g., on a home screen or pre-workout summary.",
        "testStrategy": "Verify HRV and Body Battery data is fetched correctly from Garmin services (requires device or simulator with mock data). Test display of this data. Handle cases where data is unavailable.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Display Historical Performance Context During Workouts",
        "description": "Display relevant historical performance data (e.g., last session's weight/reps for the current exercise) directly within the active workout screen to provide context.",
        "details": "1. When an exercise starts in the active workout UI (Task 19), query workout history (Task 22) for the last few performances of this specific exercise. 2. Display key metrics like 'Last time: 3x8 @ 100kg'. 3. Ensure this data is easily glanceable and doesn't clutter the UI.",
        "testStrategy": "Perform an exercise, complete workout. Start a new workout with the same exercise and verify historical data is displayed correctly. Test with no prior history for an exercise.",
        "priority": "medium",
        "dependencies": [
          19,
          22
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Implement Basic Form Feedback System",
        "description": "Implement a basic form feedback mechanism during workouts, such as simple on-watch visual cues or haptic feedback for tempo or range of motion deviations, based on sensor data.",
        "details": "1. Define simple metrics for form quality (e.g., rep duration for tempo, accelerometer path consistency). 2. If deviation detected, provide feedback: e.g., vibrate for too fast/slow tempo, show a simple icon for poor range. 3. Focus on one or two key aspects of form for MVP. `Pseudo-code: if (currentRepDuration < targetTempo.eccentric * 0.8) { Vibe.vibrate(short_pulse); }`",
        "testStrategy": "Test feedback mechanism with simulated good and bad form for specific exercises. Verify haptic/visual cues are triggered appropriately. Gather user feedback on clarity and usefulness of cues.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Mid-Workout Modification: Skip/Substitute Exercise",
        "description": "Allow users to modify their workout mid-session by skipping the current exercise or substituting it with an alternative from the exercise library.",
        "details": "1. Add 'Skip Exercise' and 'Substitute Exercise' options to the active workout UI (Task 19). 2. Skipping marks the exercise as skipped in the log. 3. Substituting opens the exercise library (Task 16) to pick a replacement; the new exercise replaces the current one in the session.",
        "testStrategy": "Test skipping an exercise and verify it's logged correctly. Test substituting an exercise: ensure the new exercise is loaded and tracked correctly. Verify workout flow continues smoothly after modification.",
        "priority": "medium",
        "dependencies": [
          16,
          19
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Develop Data Sync Mechanism with Garmin Connect",
        "description": "Develop the mechanism for bidirectional data synchronization with Garmin Connect, primarily for backing up workout history and potentially user settings/templates.",
        "details": "1. Use `Toybox.Communications` module for network requests. 2. Authenticate with Garmin Connect (likely handled by Garmin's framework for app settings sync or direct API if available for workout data). 3. Implement logic to send completed workout data (`.FIT` file generation if possible/required, or custom format) to Garmin Connect. 4. Implement logic to fetch data from Garmin Connect (e.g., settings synced from phone). 5. Handle background sync and conflict resolution if necessary. PRD mentions sync within 30s.",
        "testStrategy": "Test syncing workout data to Garmin Connect and verify it appears in the user's Garmin Connect account. Test syncing settings/templates from Garmin Connect to the watch. Test sync performance and reliability, including offline scenarios.",
        "priority": "high",
        "dependencies": [
          14,
          22
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Implement Basic Workout Analytics View",
        "description": "Implement a basic screen or section to display simple workout analytics, such as total volume load over time, number of workouts per week, or PR tracking for key lifts.",
        "details": "1. Query workout history (Task 22) to calculate metrics. 2. Display data using simple charts or lists (Garmin IQ SDK might have limited charting capabilities, consider text-based summaries). 3. Focus on 2-3 key metrics for MVP, e.g., weekly volume, PRs for major lifts. Store calculated analytics in `AnalyticsCache` (Task 14).",
        "testStrategy": "Verify analytics calculations are correct based on logged workout data. Test display of analytics. Check performance when calculating analytics over a large history.",
        "priority": "low",
        "dependencies": [
          22
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Design Backend Requirements for Social Features & Template Marketplace",
        "description": "Define the backend API specifications and database schema required for future social features (workout sharing, leaderboards, challenges) and the template marketplace.",
        "details": "1. This is a design task. Specify REST API endpoints (e.g., `/users`, `/workouts`, `/templates`, `/challenges`). 2. Define request/response payloads. 3. Design database tables (e.g., Users, Workouts, SharedTemplates, ChallengeEntries). 4. Consider authentication and authorization mechanisms. This informs future backend development, not implemented on-device in this task.",
        "testStrategy": "Review API design for completeness, scalability, and security. Ensure it supports all planned social and marketplace features from the PRD. Get feedback from potential backend developers.",
        "priority": "low",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-22T01:13:08.124Z",
      "updated": "2025-06-22T02:04:55.673Z",
      "description": "Tasks for master context"
    }
  }
}